import os
import hashlib
import time
import base64
import requests

# Konfigurasi
API_KEY = "MASUKKAN_API_KEY_VIRUSTOTAL_MU_DI_SINI"  # <-- Ganti ini
SUSPICIOUS_EXTENSIONS = ['.exe', '.bat', '.vbs', '.js', '.scr', '.cmd']
LOG_FILE = "hasil_scan_log.txt"

def log_hasil(teks):
    with open(LOG_FILE, "a") as f:
        f.write(teks + "\n")

def hitung_md5(file_path):
    try:
        with open(file_path, 'rb') as f:
            data = f.read()
            return hashlib.md5(data).hexdigest()
    except Exception as e:
        return None

def cek_virus_total(file_hash):
    url = f"https://www.virustotal.com/api/v3/files/{file_hash}"
    headers = {
        "x-apikey": API_KEY
    }
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        data = response.json()
        stats = data['data']['attributes']['last_analysis_stats']
        malicious = stats.get("malicious", 0)
        if malicious > 0:
            return f"‚ö†Ô∏è VirusTotal: Terdeteksi oleh {malicious} engine"
        else:
            return "‚úÖ VirusTotal: Aman"
    else:
        return "‚ö†Ô∏è Gagal cek VirusTotal"

def deteksi_obfuscated_code(file_path):
    try:
        with open(file_path, 'r', errors='ignore') as f:
            teks = f.read()
            if "eval(" in teks or "base64" in teks:
                return True
    except:
        return False
    return False

def scan_file(file_path):
    status = []
    _, ext = os.path.splitext(file_path)

    if ext.lower() in SUSPICIOUS_EXTENSIONS:
        status.append("Ekstensi mencurigakan")

    if os.path.basename(file_path).startswith('.'):
        status.append("File tersembunyi")

    if os.path.getsize(file_path) < 100:
        status.append("Ukuran file mencurigakan")

    if deteksi_obfuscated_code(file_path):
        status.append("Mengandung kode obfuscated (eval/base64)")

    file_hash = hitung_md5(file_path)
    if file_hash:
        vt_status = cek_virus_total(file_hash)
        status.append(vt_status)
    else:
        status.append("Gagal hitung hash")

    return status

def scan_directory(folder):
    print(f"üîç Mulai pemindaian folder: {folder}\n")
    log_hasil(f"--- Scan: {time.ctime()} ---")
    for root, dirs, files in os.walk(folder):
        for file in files:
            path = os.path.join(root, file)
            hasil = scan_file(path)
            if hasil:
                print(f"\n[!] {path}")
                for item in hasil:
                    print("   -", item)
                log_hasil(f"{path} : {' | '.join(hasil)}")
    print("\n‚úÖ Pemindaian selesai. Lihat log di:", LOG_FILE)

if __name__ == "__main__":
    target_folder = input("Masukkan folder untuk discan: ")
    if os.path.exists(target_folder):
        scan_directory(target_folder)
    else:
        print("‚ùå Folder tidak ditemukan.")
